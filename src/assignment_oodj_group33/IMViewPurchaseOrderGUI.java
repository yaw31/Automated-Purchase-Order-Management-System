/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oodj_group33;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class IMViewPurchaseOrderGUI extends javax.swing.JFrame {
    private User user;

    public IMViewPurchaseOrderGUI(User user) {
        this.user = user;
        initComponents();
        this.setPreferredSize(new Dimension(720, 450));
        this.pack();
        this.setLocationRelativeTo(null);
        
        tablePurchaseOrderItems.setVisible(false);
        btnUpdate.setVisible(false);
        
        DefaultTableModel model = new DefaultTableModel(
            new Object[][] {},
            new String[] { "Item ID", "Item Name", "Supplier ID", "Purchased Quantity", "Received Quantity", "Status" }
        ) {
            Class[] types = new Class[] {
                String.class, String.class, String.class, Integer.class, Integer.class, String.class
            };

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                String status = (String) getValueAt(row, 5);
                if (status == null) return false;

                if (status.equalsIgnoreCase("Received") || 
                    status.equalsIgnoreCase("Rejected") || 
                    status.equalsIgnoreCase("Error")) {
                    return false;
                }

                return column == 4;
            }
        };

        tablePurchaseOrderItems.setModel(model);
        tablePurchaseOrderItems.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPageName = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblPrompt = new javax.swing.JLabel();
        txtPurchaseOrderIDSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePurchaseOrderItems = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPageName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblPageName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPageName.setText("View Purchase Order");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblPrompt.setText("Enter Purchase Order ID:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tablePurchaseOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Supplier ID", "Purchased Quantity", "Received Quantity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePurchaseOrderItems);
        if (tablePurchaseOrderItems.getColumnModel().getColumnCount() > 0) {
            tablePurchaseOrderItems.getColumnModel().getColumn(0).setResizable(false);
            tablePurchaseOrderItems.getColumnModel().getColumn(1).setResizable(false);
            tablePurchaseOrderItems.getColumnModel().getColumn(2).setResizable(false);
            tablePurchaseOrderItems.getColumnModel().getColumn(3).setResizable(false);
            tablePurchaseOrderItems.getColumnModel().getColumn(4).setResizable(false);
            tablePurchaseOrderItems.getColumnModel().getColumn(5).setResizable(false);
        }

        btnUpdate.setText("Update Stock");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(lblPageName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(lblPrompt)
                .addGap(12, 12, 12)
                .addComponent(txtPurchaseOrderIDSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(588, 588, 588)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblPageName)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblPrompt))
                    .addComponent(txtPurchaseOrderIDSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnUpdate)
                .addGap(6, 6, 6)
                .addComponent(btnBack))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        InventoryManagerMenuGUI mainPage = new InventoryManagerMenuGUI(this.user);
        mainPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String poIDSearch = txtPurchaseOrderIDSearch.getText().trim();
    
        if (poIDSearch.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a Purchase Order ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tablePurchaseOrderItems.getModel(); 

        IMViewPurchaseOrder loader = new IMViewPurchaseOrder(model);
        boolean found = loader.loadTable(poIDSearch);

        if (found) {
            tablePurchaseOrderItems.setVisible(true);

            for (int i = 0; i < model.getRowCount(); i++) {
                String status = model.getValueAt(i, 5).toString();
                if (!status.equalsIgnoreCase("Received") &&
                    !status.equalsIgnoreCase("Rejected") &&
                    !status.equalsIgnoreCase("Error") &&
                    !status.equalsIgnoreCase("Pending") &&
                    !status.equalsIgnoreCase("Paid")) {
                    btnUpdate.setVisible(true);
                    break;
                }
                else{
                    btnUpdate.setVisible(false);
                }
            }
        } 
        else {
            JOptionPane.showMessageDialog(this, "Purchase Order ID not found. Please enter a valid Purchase Order ID");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        DefaultTableModel model = (DefaultTableModel) tablePurchaseOrderItems.getModel();
        String poID = txtPurchaseOrderIDSearch.getText().trim();

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                int receivedQuantity = Integer.parseInt(model.getValueAt(i, 4).toString());
                if (receivedQuantity < 0) {
                    JOptionPane.showMessageDialog(this, "Row " + (i + 1) + ": Received quantity cannot be negative.",
                            "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Row " + (i + 1) + ": Invalid received quantity. Please enter a valid number.",
                        "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        List<Integer> mismatchRows = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            int purchasedQuantity = (int) model.getValueAt(i, 3);
            int receivedQuantity = Integer.parseInt(model.getValueAt(i, 4).toString());
            if (purchasedQuantity != receivedQuantity) {
                mismatchRows.add(i + 1);
            }
        }

        if (!mismatchRows.isEmpty()) {
            String mismatchMessage = "The following row(s) have mismatched Purchased and Received quantities:\n" +
                    mismatchRows.toString() + "\n\nDo you still want to continue updating?";
            int confirm = JOptionPane.showConfirmDialog(this, mismatchMessage, "Mismatch Warning",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirm != JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(this, "Update cancelled. Please correct the quantities and try again.");
                return;
            }
        } else {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to update this Purchase Order?",
                    "Confirm Update", JOptionPane.YES_NO_OPTION);

            if (confirm != JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(this, "Update cancelled.");
                return;
            }
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                String itemID = model.getValueAt(i, 0).toString();
                int receivedQuantity = Integer.parseInt(model.getValueAt(i, 4).toString());

                IMViewPurchaseOrder poUpdater = new IMViewPurchaseOrder(model);
                poUpdater.updatePurchaseOrder(poID, itemID, receivedQuantity);

                IMViewPurchaseOrder itemUpdater = new IMViewPurchaseOrder(model);
                itemUpdater.updateItem(itemID, receivedQuantity);
            } catch (InvalidNumberException ex) {
                JOptionPane.showMessageDialog(this, "Row " + (i + 1) + ": " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        JOptionPane.showMessageDialog(this, "Purchase Order and stock updated successfully!");
        btnUpdate.setVisible(false);
        IMViewPurchaseOrder loader = new IMViewPurchaseOrder((DefaultTableModel) tablePurchaseOrderItems.getModel());
        loader.loadTable(poID);
    }//GEN-LAST:event_btnUpdateActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPageName;
    private javax.swing.JLabel lblPrompt;
    private javax.swing.JTable tablePurchaseOrderItems;
    private javax.swing.JTextField txtPurchaseOrderIDSearch;
    // End of variables declaration//GEN-END:variables
}
