/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oodj_group33;


import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class SMSupplierManagementGUI extends javax.swing.JFrame {
    private User user;
    public SMSupplierManagementGUI(User user) {
        this.user = user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTextUnitPrice = new javax.swing.JTextField();
        JBtnAdd = new javax.swing.JButton();
        JBtnEdit = new javax.swing.JButton();
        JBtnDelete = new javax.swing.JButton();
        JClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableSupplierManagement = new javax.swing.JTable();
        JBtnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        JLabelSupplierID = new javax.swing.JLabel();
        JLabelItemID = new javax.swing.JLabel();
        JLabelItemName = new javax.swing.JLabel();
        JLabelUnitPrice = new javax.swing.JLabel();
        JTextSupplierID = new javax.swing.JTextField();
        JTextItemID = new javax.swing.JTextField();
        JTextItemName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Supplier Management Page");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        JBtnAdd.setText("Add");
        JBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnAddActionPerformed(evt);
            }
        });

        JBtnEdit.setText("Edit");
        JBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnEditActionPerformed(evt);
            }
        });

        JBtnDelete.setText("Delete");
        JBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnDeleteActionPerformed(evt);
            }
        });

        JClear.setText("Clear");
        JClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JClearActionPerformed(evt);
            }
        });

        JTableSupplierManagement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "SupplierID", "ItemID", "ItemName", "UnitPrice"
            }
        ));
        jScrollPane1.setViewportView(JTableSupplierManagement);

        JBtnBack.setText("Back");
        JBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnBackActionPerformed(evt);
            }
        });

        jLabel1.setText("SUPPLIER MANAGEMENT");

        JLabelSupplierID.setText("SupplierID:");

        JLabelItemID.setText("ItemID:");

        JLabelItemName.setText("ItemName:");

        JLabelUnitPrice.setText("UnitPrice:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(JBtnBack)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JBtnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(JBtnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(JBtnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(JClear))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(JLabelSupplierID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLabelItemID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLabelItemName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLabelUnitPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(JTextSupplierID)
                                    .addComponent(JTextItemID)
                                    .addComponent(JTextItemName)
                                    .addComponent(JTextUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelSupplierID)
                    .addComponent(JTextSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemID)
                    .addComponent(JTextItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemName)
                    .addComponent(JTextItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelUnitPrice)
                    .addComponent(JTextUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtnAdd)
                    .addComponent(JBtnEdit)
                    .addComponent(JBtnDelete)
                    .addComponent(JClear))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBtnBack)
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(55, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnBackActionPerformed
        SalesManagerMenuGUI SMmenuForm = new SalesManagerMenuGUI(this.user);
        SMmenuForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_JBtnBackActionPerformed

    private void JClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JClearActionPerformed
        JTextSupplierID.setText("");
        JTextItemID.setText("");
        JTextItemName.setText("");
        JTextUnitPrice.setText("");
        
        loadSupplierDataToTable();
    }//GEN-LAST:event_JClearActionPerformed

    private void JBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnAddActionPerformed
        try {
            String supplierID = JTextSupplierID.getText();
            String itemID = JTextItemID.getText();
            String itemName = JTextItemName.getText();
            String unitPrice= JTextUnitPrice.getText();
            
            if (!validateSupplierInputs(supplierID, itemID, itemName, unitPrice)) return;
            
            double price = Double.parseDouble(JTextUnitPrice.getText());

            String itemFilePath = "item.txt";
            String supplierFilePath = "supplier.txt";

            FileHandler.addNewSupplier(
                supplierID,
                itemID,
                price,
                itemFilePath,
                supplierFilePath
            );

            JOptionPane.showMessageDialog(this, "Supplier added and the stock is updated.");
            loadSupplierDataToTable();

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        }
    }//GEN-LAST:event_JBtnAddActionPerformed

    private void JBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnEditActionPerformed
        int selectedRow = JTableSupplierManagement.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a supplier from the table to delete.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String supplierID = JTableSupplierManagement.getValueAt(selectedRow, 0).toString();
        String itemID = JTextItemID.getText();
        String itemName = JTextItemName.getText();
        double unitprice = Double.parseDouble(JTextUnitPrice.getText());

        try {
            String itemFilePath = "item.txt";
            String supplierFilePath = "supplier.txt";

            FileHandler.editSupplier( 
                supplierID,
                itemID,
                itemName,
                unitprice,
                itemFilePath,
                supplierFilePath
            );

            JOptionPane.showMessageDialog(this,
                "Supplier updated successfully.",
                "Update Successful",
                JOptionPane.INFORMATION_MESSAGE);

            loadSupplierDataToTable();

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JBtnEditActionPerformed

    private void JBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnDeleteActionPerformed
        int selectedRow = JTableSupplierManagement.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select a supplier from the table to delete.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String supplierID = JTableSupplierManagement.getValueAt(selectedRow, 0).toString();
        String itemID = JTextItemID.getText();
        
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this supplier: " + supplierID + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String itemFilePath = "item.txt";
                String supplierFilePath = "supplier.txt";

                FileHandler.deleteSupplier(supplierID, itemID, itemFilePath, supplierFilePath);

                JOptionPane.showMessageDialog(this,
                    "Supplier successfully deleted.",
                    "Deletion Successful",
                    JOptionPane.INFORMATION_MESSAGE);

                loadSupplierDataToTable();

            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_JBtnDeleteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadSupplierDataToTable();
        
        JTableSupplierManagement.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && JTableSupplierManagement.getSelectedRow() != -1) {
            int selectedRow = JTableSupplierManagement.getSelectedRow();
            JTextSupplierID.setText(JTableSupplierManagement.getValueAt(selectedRow, 0).toString());
            JTextItemID.setText(JTableSupplierManagement.getValueAt(selectedRow, 1).toString());
            JTextItemName.setText(JTableSupplierManagement.getValueAt(selectedRow, 2).toString());
            JTextUnitPrice.setText(JTableSupplierManagement.getValueAt(selectedRow, 3).toString());

            ArrayList<Supplier> list = FileHandler.loadSupFile("purchase_requisitions.txt");
            if (selectedRow < list.size()) {
                Supplier SM = list.get(selectedRow);
                JTextSupplierID.setText(SM.getSupplierId());
                JTextItemName.setText(SM.getItemName());
                JTextItemID.setText(SM.getItemId());
                JTextUnitPrice.setText(String.valueOf(SM.getUnitPrice()));
                }
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void loadSupplierDataToTable() {
        DefaultTableModel model = (DefaultTableModel) JTableSupplierManagement.getModel();
        model.setRowCount(0);

        ArrayList<Supplier> list = FileHandler.loadSupFile("supplier.txt");
        for (Supplier SM : list) {
            model.addRow(new Object[]{
                SM.getSupplierId(),
                SM.getItemId(),
                SM.getItemName(),
                SM.getUnitPrice()
            });
        }
    }
    
    private boolean validateSupplierInputs(String supplierID, String itemID, String itemName, String UnitPrice) {
        if (supplierID.isEmpty() || itemID.isEmpty() || itemName.isEmpty() || UnitPrice.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        try {
            double price = Double.parseDouble(UnitPrice);
            if (price < 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be a non-negative number.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity must be a valid number.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtnAdd;
    private javax.swing.JButton JBtnBack;
    private javax.swing.JButton JBtnDelete;
    private javax.swing.JButton JBtnEdit;
    private javax.swing.JButton JClear;
    private javax.swing.JLabel JLabelItemID;
    private javax.swing.JLabel JLabelItemName;
    private javax.swing.JLabel JLabelSupplierID;
    private javax.swing.JLabel JLabelUnitPrice;
    private javax.swing.JTable JTableSupplierManagement;
    private javax.swing.JTextField JTextItemID;
    private javax.swing.JTextField JTextItemName;
    private javax.swing.JTextField JTextSupplierID;
    private javax.swing.JTextField JTextUnitPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
