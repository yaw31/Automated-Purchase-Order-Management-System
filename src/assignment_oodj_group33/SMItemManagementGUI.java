/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oodj_group33;


import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class SMItemManagementGUI extends javax.swing.JFrame {
    private User user;
    public SMItemManagementGUI(User user) {
        this.user = user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JBtnBack = new javax.swing.JButton();
        JTextItemID = new javax.swing.JTextField();
        JTextItemName = new javax.swing.JTextField();
        JTextQuantity = new javax.swing.JTextField();
        JTextPrice = new javax.swing.JTextField();
        JTextSupplierID = new javax.swing.JTextField();
        JLabelItemID = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableItemManagement = new javax.swing.JTable();
        JLabelItemName = new javax.swing.JLabel();
        JLabelQuantity = new javax.swing.JLabel();
        JLabelPrice = new javax.swing.JLabel();
        JLabelSupplierID = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        JBtnAdd = new javax.swing.JButton();
        JBtnEdit = new javax.swing.JButton();
        JBtnDelete = new javax.swing.JButton();
        JBtnClear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        JTextLastUpdated = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Item Management page");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        JBtnBack.setText("Back");
        JBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnBackActionPerformed(evt);
            }
        });

        JLabelItemID.setText("ItemID:");

        JTableItemManagement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "Name", "Quantity", "Unit Price", "SupplierID"
            }
        ));
        jScrollPane1.setViewportView(JTableItemManagement);

        JLabelItemName.setText("Name:");

        JLabelQuantity.setText("Quantity:");

        JLabelPrice.setText("Unit Price:");

        JLabelSupplierID.setText("SupplierID:");

        jLabel1.setText("ITEM MANAGEMENT");

        JBtnAdd.setText("Add");
        JBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnAddActionPerformed(evt);
            }
        });

        JBtnEdit.setText("Edit");
        JBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnEditActionPerformed(evt);
            }
        });

        JBtnDelete.setText("Delete");
        JBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnDeleteActionPerformed(evt);
            }
        });

        JBtnClear.setText("Clear");
        JBtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnClearActionPerformed(evt);
            }
        });

        jLabel2.setText("Last Updated:");

        JTextLastUpdated.setText("yyyy-mm-dd");
        JTextLastUpdated.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTextLastUpdatedMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLabelQuantity)
                            .addComponent(JLabelItemName)
                            .addComponent(JLabelItemID)
                            .addComponent(JBtnAdd))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(JTextQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(JTextItemName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JTextItemID, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLabelSupplierID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JLabelPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(JTextPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                        .addComponent(JTextSupplierID))
                                    .addComponent(JTextLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(JBtnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(JBtnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(JBtnClear))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(542, 542, 542)
                        .addComponent(JBtnBack)))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemID)
                    .addComponent(JTextItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(JTextLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTextItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLabelItemName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTextQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLabelQuantity))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JBtnAdd)
                            .addComponent(JBtnEdit)
                            .addComponent(JBtnDelete)
                            .addComponent(JBtnClear)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTextPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLabelPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLabelSupplierID)
                            .addComponent(JTextSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JBtnBack)
                .addGap(42, 42, 42))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnBackActionPerformed
        SalesManagerMenuGUI SMmenuForm = new SalesManagerMenuGUI(this.user);
        SMmenuForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_JBtnBackActionPerformed

    private void JBtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnClearActionPerformed
        JTextItemID.setText("");
        JTextItemName.setText("");
        JTextQuantity.setText("");
        JTextPrice.setText("");
        JTextSupplierID.setText("");
        JTextLastUpdated.setText("yyyy-mm-dd");
        
        loadItemDataToTable();
    }//GEN-LAST:event_JBtnClearActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadItemDataToTable();
        
        JTableItemManagement.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && JTableItemManagement.getSelectedRow() != -1) {
            int selectedRow = JTableItemManagement.getSelectedRow();
            JTextItemID.setText(JTableItemManagement.getValueAt(selectedRow, 0).toString());
            JTextItemName.setText(JTableItemManagement.getValueAt(selectedRow, 1).toString());
            JTextSupplierID.setText(JTableItemManagement.getValueAt(selectedRow, 2).toString());
            JTextQuantity.setText(JTableItemManagement.getValueAt(selectedRow, 3).toString());
            JTextPrice.setText(JTableItemManagement.getValueAt(selectedRow, 4).toString());JTextSupplierID.setText(JTableItemManagement.getValueAt(selectedRow, 2).toString());
            
            ArrayList<Item> list = FileHandler.loadItem("item.txt");
            if (selectedRow < list.size()) {
                Item IM = list.get(selectedRow);
                JTextItemID.setText(IM.getItemID());
                JTextItemName.setText(IM.getItemName());
                JTextSupplierID.setText(IM.getSupplierID());
                JTextQuantity.setText(String.valueOf(IM.getQuantity()));
                JTextPrice.setText(String.valueOf(IM.getPrice()));
                JTextLastUpdated.setText(IM.getLatestUpdateDate());
                }
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void JBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnAddActionPerformed
        String itemID = JTextItemID.getText();
        String itemName = JTextItemName.getText();
        String supplierID = JTextSupplierID.getText();
        String quantityStr = JTextQuantity.getText();
        String priceStr = JTextPrice.getText();
        String lastUpdated = JTextLastUpdated.getText();
        

        if (!validateItemInputs(itemID, itemName, quantityStr, supplierID, priceStr, lastUpdated)) return;

        int quantity = Integer.parseInt(quantityStr);
        double price = Double.parseDouble(priceStr);

        Item newItem = new Item(
                itemID, 
                itemName, 
                supplierID, 
                quantity, 
                price, 
                lastUpdated
                
        );

        try {
            FileHandler.addItem(newItem, "item.txt");
            loadItemDataToTable();
            JOptionPane.showMessageDialog(this, "Item added successfully.");
            
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        }
    }//GEN-LAST:event_JBtnAddActionPerformed

    private void JBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnEditActionPerformed
        int selectedRow = JTableItemManagement.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to edit.");
                return;
            }

            String itemID = JTextItemID.getText().trim();
            String itemName = JTextItemName.getText().trim();
            String supplierID = JTextSupplierID.getText().trim();
            String quantityStr = JTextQuantity.getText().trim();
            String priceStr = JTextPrice.getText().trim();
            String lastUpdated = JTextLastUpdated.getText().trim();

            if (!validateItemInputs(itemID, itemName, quantityStr, supplierID, priceStr, lastUpdated)) return;

            int quantity = Integer.parseInt(quantityStr);
            double price = Double.parseDouble(priceStr);

            Item updatedItem = new Item(
                    itemID, 
                    itemName, 
                    supplierID, 
                    quantity, 
                    price, 
                    lastUpdated
            );

            try {
                FileHandler.editItem(selectedRow, updatedItem, "item.txt");
                loadItemDataToTable();
                JOptionPane.showMessageDialog(this, "Item updated successfully.");
                
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
            }
    }//GEN-LAST:event_JBtnEditActionPerformed

    private void JBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnDeleteActionPerformed
        int selectedRow = JTableItemManagement.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this item?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                FileHandler.deleteItem(selectedRow, "item.txt");
                loadItemDataToTable();
                JOptionPane.showMessageDialog(this, "Item deleted.");
                
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_JBtnDeleteActionPerformed

    private void JTextLastUpdatedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTextLastUpdatedMouseClicked
        JTextLastUpdated.setText("");
    }//GEN-LAST:event_JTextLastUpdatedMouseClicked

    private void loadItemDataToTable() {
        DefaultTableModel model = (DefaultTableModel) JTableItemManagement.getModel();
        model.setRowCount(0);

        ArrayList<Item> list = FileHandler.loadItem("item.txt");
        for (Item IM : list) {
            model.addRow(new Object[]{
                IM.getItemID(),
                IM.getItemName(),
                IM.getQuantity(),
                IM.getPrice(),
                IM.getSupplierID()
            });
        }
    }
    
    private boolean validateItemInputs(String itemID, String itemName, String itemQuantity, String lastUpdated, String UnitPrice, String supplierID) {
        if (itemID.isEmpty() || itemName.isEmpty() || itemQuantity.isEmpty() || lastUpdated.isEmpty() || UnitPrice.isEmpty() || supplierID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        try {
            int quantity = Integer.parseInt(itemQuantity);
            double price = Double.parseDouble(UnitPrice);
            if (quantity < 0 || price < 0) {
                JOptionPane.showMessageDialog(this, "Quantity and item unit price must be a non-negative number.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity and item unit price must be a valid number.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtnAdd;
    private javax.swing.JButton JBtnBack;
    private javax.swing.JButton JBtnClear;
    private javax.swing.JButton JBtnDelete;
    private javax.swing.JButton JBtnEdit;
    private javax.swing.JLabel JLabelItemID;
    private javax.swing.JLabel JLabelItemName;
    private javax.swing.JLabel JLabelPrice;
    private javax.swing.JLabel JLabelQuantity;
    private javax.swing.JLabel JLabelSupplierID;
    private javax.swing.JTable JTableItemManagement;
    private javax.swing.JTextField JTextItemID;
    private javax.swing.JTextField JTextItemName;
    private javax.swing.JTextField JTextLastUpdated;
    private javax.swing.JTextField JTextPrice;
    private javax.swing.JTextField JTextQuantity;
    private javax.swing.JTextField JTextSupplierID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
