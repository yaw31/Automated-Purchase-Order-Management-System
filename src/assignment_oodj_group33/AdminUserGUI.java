/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oodj_group33;
import java.io.IOException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

public class AdminUserGUI extends javax.swing.JFrame {
    private DefaultTableModel model = new DefaultTableModel();
    private String[] columnName = {"User Id", "Password", "Role"};
    private User user;
    
    
    
    public AdminUserGUI(User user) {
        this.user = user;
        initComponents();
        loadRoleComboBox();
        model.setColumnIdentifiers(columnName);
        loadUserTable();
        cmbRole.setSelectedIndex(-1);
    }
    
    
    private void loadRoleComboBox() {
        cmbRole.removeAllItems();  // Clear first
        cmbRole.addItem("Sales Manager");
        cmbRole.addItem("Purchase Manager");
        cmbRole.addItem("Inventory Manager");
        cmbRole.addItem("Finance Manager");
        cmbRole.addItem("Administrator");
    }

    
    private void loadUserTable(){      
            List<User> users = FileHandler.loadUsers(); // read from file
            // Clear the table 
            model.setRowCount(0);
            // Add each user to the table
            for (User u : users) {
                Object[] row = {
                    u.getUserId(),
                    u.getPassword(),
                    u.getRole()
                };
                model.addRow(row);
            }  
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabID = new javax.swing.JLabel();
        LabPWD = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnProceed = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabID.setText("User Id");

        LabPWD.setText("Password");

        txtUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIdActionPerformed(evt);
            }
        });

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        cmbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRoleActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnProceed.setText("Back");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        userTable.setModel(model);
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);

        jLabel1.setText("Role");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnProceed, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(274, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(LabPWD))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(LabID)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(LabPWD)
                        .addGap(18, 18, 18)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnEdit)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(btnProceed)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserIdActionPerformed

    private void cmbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRoleActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String userId = txtUserId.getText().trim();
        String password = txtPassword.getText().trim();
        Object selected = cmbRole.getSelectedItem();
        if (userId.isEmpty() || password.isEmpty() || selected == null) {
        JOptionPane.showMessageDialog(this, "User ID , Password and Role fields cannot be empty.",
                "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
        String role = cmbRole.getSelectedItem().toString();
        char expectedPrefix = role.charAt(0); // e.g. "Admin" → 'A'
        char actualPrefix = userId.charAt(0);
        
        

        // Validate User ID
        ValidationResult idResult = Validator.validateUserId(userId);
        if (!idResult.isValid()) {
            JOptionPane.showMessageDialog(this, idResult.getMessage(), "Invalid User ID", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Password
        ValidationResult pwResult = Validator.validatePassword(password);
        if (!pwResult.isValid()) {
            JOptionPane.showMessageDialog(this, pwResult.getMessage(), "Invalid Password", JOptionPane.ERROR_MESSAGE);
            return;
        }
        

        if (actualPrefix != expectedPrefix) {
            JOptionPane.showMessageDialog(this,
                "User ID must start with '" + expectedPrefix + "' for role: " + role,
                "Role Mismatch", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            Administrator admin = new Administrator();
            admin.createUser(userId, password, role);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        

        


        // Notify & Reset
        JOptionPane.showMessageDialog(this, "User account created successfully.");
        txtUserId.setText("");
        txtPassword.setText("");
        cmbRole.setSelectedIndex(-1); // reset combo box
        loadUserTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = userTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.");
            return;
        }

        String newUserId = txtUserId.getText().trim();
        String newPassword = txtPassword.getText().trim();
        String newRole = cmbRole.getSelectedItem().toString();

        // Validate userId and password
        ValidationResult idResult = Validator.validateUserId(newUserId);
        ValidationResult pwResult = Validator.validatePassword(newPassword);
        if (!idResult.isValid()) {
            JOptionPane.showMessageDialog(this, idResult.getMessage(), "Invalid User ID", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!pwResult.isValid()) {
            JOptionPane.showMessageDialog(this, pwResult.getMessage(), "Invalid Password", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Load all users
        List<User> users = FileHandler.loadUsers();
        String oldUserId = userTable.getValueAt(selectedRow, 0).toString();
        
        try{
            if (newUserId.equals(oldUserId)) {
            Administrator admin = new Administrator();
            admin.editUser(newUserId, newPassword, newRole);
            JOptionPane.showMessageDialog(this, "User updated successfully.");
            }else{
                JOptionPane.showMessageDialog(this, "User Id Must Same", "Invalid User Id", JOptionPane.ERROR_MESSAGE);
            }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }



        
        loadUserTable(); // Reload updated data
        txtUserId.setText("");
        txtPassword.setText("");
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
    AdminMenuGUI userPage = new AdminMenuGUI(this.user);
    userPage.setVisible(true);
    this.dispose();      
    }//GEN-LAST:event_btnProceedActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = userTable.getSelectedRow(); // your table name might differ

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an account to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }


        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user account?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        String userId = userTable.getValueAt(selectedRow, 0).toString();
        FileHandler.loadUsers();
        
        try {
            Administrator admin = new Administrator();
            admin.deleteUser(userId);
        } catch (IOException ex) {
            System.err.println("Error reading file I/O" + ex.getMessage());
        }
        
        loadUserTable(); 

        JOptionPane.showMessageDialog(this, "User account deleted successfully.");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        
        int selectedRow = userTable.getSelectedRow(); 

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) userTable.getModel();

            String userId = model.getValueAt(selectedRow, 0).toString();
            String password = model.getValueAt(selectedRow, 1).toString();
            String role = model.getValueAt(selectedRow, 2).toString();

            txtUserId.setText(userId);                 // Set to User ID field
            txtPassword.setText(password);             // Set to Password field
            cmbRole.setSelectedItem(role);             // Select role in combo box
        }
    }//GEN-LAST:event_userTableMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabID;
    private javax.swing.JLabel LabPWD;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnProceed;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
