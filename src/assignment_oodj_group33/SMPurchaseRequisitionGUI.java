/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oodj_group33;

import java.time.LocalDate;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class SMPurchaseRequisitionGUI extends javax.swing.JFrame {
    private User user;
    public SMPurchaseRequisitionGUI(User user) {
        this.user = user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JBtnBack = new javax.swing.JButton();
        JLabelPurchaseRequisition = new javax.swing.JLabel();
        JLabelRequisitionID = new javax.swing.JLabel();
        JLabelItemID = new javax.swing.JLabel();
        JLabelQuantity = new javax.swing.JLabel();
        JLabelRequiredBy = new javax.swing.JLabel();
        JTextRequisitionID = new javax.swing.JTextField();
        JTextItemID = new javax.swing.JTextField();
        JTextQuantity = new javax.swing.JTextField();
        JTextRequiredBy = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTablePurchaseRequisition = new javax.swing.JTable();
        JBtnAdd = new javax.swing.JButton();
        JBtnEdit = new javax.swing.JButton();
        JBtnDelete = new javax.swing.JButton();
        JBtnClear = new javax.swing.JButton();
        JLabelItemName = new javax.swing.JLabel();
        JLabelSupplierID = new javax.swing.JLabel();
        JLabelSalesManagerID = new javax.swing.JLabel();
        JTextSalesManagerID = new javax.swing.JTextField();
        JTextSupplierID = new javax.swing.JTextField();
        JTextItemName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Purchase Requisition Page");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        JBtnBack.setText("Back");
        JBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnBackActionPerformed(evt);
            }
        });

        JLabelPurchaseRequisition.setText("PURCHASE REQUISITION");

        JLabelRequisitionID.setText("RequisitionID:");

        JLabelItemID.setText("ItemID:");

        JLabelQuantity.setText("Quantity:");

        JLabelRequiredBy.setText("Required By:");

        JTextRequiredBy.setText("yyyy-mm-dd");
        JTextRequiredBy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTextRequiredByMouseClicked(evt);
            }
        });

        JTablePurchaseRequisition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RequisitionID", "ItemID", "Quantity", "Required By"
            }
        ));
        jScrollPane1.setViewportView(JTablePurchaseRequisition);

        JBtnAdd.setText("Add");
        JBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnAddActionPerformed(evt);
            }
        });

        JBtnEdit.setText("Edit");
        JBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnEditActionPerformed(evt);
            }
        });

        JBtnDelete.setText("Delete");
        JBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnDeleteActionPerformed(evt);
            }
        });

        JBtnClear.setText("Clear");
        JBtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnClearActionPerformed(evt);
            }
        });

        JLabelItemName.setText("ItemName:");

        JLabelSupplierID.setText("SupplierID:");

        JLabelSalesManagerID.setText("SalesManagerID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBtnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(JBtnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(JBtnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(JBtnClear)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(JBtnBack)
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLabelPurchaseRequisition)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JLabelItemID)
                                    .addComponent(JLabelRequiredBy)
                                    .addComponent(JLabelRequisitionID, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(JLabelQuantity))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(JTextQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                        .addComponent(JTextItemID, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(JTextRequisitionID, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(JTextRequiredBy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JLabelSalesManagerID)
                                    .addComponent(JLabelSupplierID)
                                    .addComponent(JLabelItemName))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(JTextSalesManagerID, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(JTextSupplierID)
                                    .addComponent(JTextItemName))))
                        .addContainerGap(64, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(JLabelPurchaseRequisition)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelRequisitionID)
                    .addComponent(JTextRequisitionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelItemName)
                    .addComponent(JTextItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelItemID)
                    .addComponent(JTextItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelSupplierID)
                    .addComponent(JTextSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelQuantity)
                    .addComponent(JTextQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelSalesManagerID)
                    .addComponent(JTextSalesManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabelRequiredBy)
                    .addComponent(JTextRequiredBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtnAdd)
                    .addComponent(JBtnEdit)
                    .addComponent(JBtnDelete)
                    .addComponent(JBtnClear))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBtnBack)
                        .addGap(39, 39, 39))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(32, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnBackActionPerformed
        SalesManagerMenuGUI SMmenuForm = new SalesManagerMenuGUI(this.user);
        SMmenuForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_JBtnBackActionPerformed

    private void JBtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnClearActionPerformed
        JTextRequisitionID.setText("");
        JTextItemID.setText("");
        JTextQuantity.setText("");
        JTextSalesManagerID.setText("");
        JTextItemName.setText("");
        JTextSupplierID.setText("");
        JTextRequiredBy.setText("yyyy-mm-dd");
        
        loadRequisitionDataToTable();
    }//GEN-LAST:event_JBtnClearActionPerformed
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadRequisitionDataToTable();
        
        JTablePurchaseRequisition.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && JTablePurchaseRequisition.getSelectedRow() != -1) {
            int selectedRow = JTablePurchaseRequisition.getSelectedRow();
            JTextRequisitionID.setText(JTablePurchaseRequisition.getValueAt(selectedRow, 0).toString());
            JTextItemID.setText(JTablePurchaseRequisition.getValueAt(selectedRow, 1).toString());
            JTextQuantity.setText(JTablePurchaseRequisition.getValueAt(selectedRow, 2).toString());
            JTextRequiredBy.setText(JTablePurchaseRequisition.getValueAt(selectedRow, 3).toString());

            ArrayList<PurchaseRequisition> list = FileHandler.loadPRFile("purchase_requisitions.txt");
            if (selectedRow < list.size()) {
                PurchaseRequisition pr = list.get(selectedRow);
                JTextItemName.setText(pr.getItemName());
                JTextSupplierID.setText(pr.getSupplierId());
                JTextRequisitionID.setText(pr.getPrId());
                JTextItemID.setText(pr.getItemId());
                JTextQuantity.setText(String.valueOf(pr.getQuantity()));
                JTextRequiredBy.setText(pr.getRequireDate().toString());
                JTextSalesManagerID.setText(pr.getSalesManager());
                }
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void JBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnAddActionPerformed
        try {
            String prId = JTextRequisitionID.getText();
            String itemId = JTextItemID.getText();
            String quantityStr = JTextQuantity.getText();
            String requiredBy = JTextRequiredBy.getText();
            String itemName = JTextItemName.getText();
            String supplierID = JTextSupplierID.getText();
            String salesmanagerID = JTextSalesManagerID.getText();

            if (!validateRequisitionInputs(prId, itemId, itemName, quantityStr, supplierID, requiredBy, salesmanagerID)) return;
            LocalDate requiredDate = LocalDate.parse(requiredBy);
            int quantity = Integer.parseInt(JTextQuantity.getText());

            ArrayList<PurchaseRequisition> list = FileHandler.loadPRFile("purchase_requisitions.txt");
                for (PurchaseRequisition existingPR : list) {
                    if (existingPR.getPrId().equalsIgnoreCase(prId)) {
                        JOptionPane.showMessageDialog(this, "Requisition ID already exists. Please use a different ID.");
                        return;
                    }
                }

            PurchaseRequisition pr = new PurchaseRequisition(
                    prId, 
                    itemId, 
                    itemName, 
                    quantity, 
                    requiredDate, 
                    supplierID, 
                    salesmanagerID
            );
            FileHandler.smPRSaveAddToFile(pr, "purchase_requisitions.txt");

            loadRequisitionDataToTable();

            JOptionPane.showMessageDialog(this, "Requisition Added Successfully.");
        
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        }
    }//GEN-LAST:event_JBtnAddActionPerformed

    private void JBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnEditActionPerformed
        int selectedRow = JTablePurchaseRequisition.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
            return;
        }
        try {
            String prId = JTextRequisitionID.getText();
            String itemId = JTextItemID.getText();
            String quantityStr = JTextQuantity.getText();
            String requiredBy = JTextRequiredBy.getText();
            String itemName = JTextItemName.getText();
            String supplierID = JTextSupplierID.getText();
            String salesmanagerID = JTextSalesManagerID.getText();

            if (!validateRequisitionInputs(prId, itemId, itemName, quantityStr, supplierID, requiredBy, salesmanagerID)) return;
            LocalDate requiredDate = LocalDate.parse(requiredBy);
            int quantity = Integer.parseInt(JTextQuantity.getText());

            ArrayList<PurchaseRequisition> list = FileHandler.loadPRFile("purchase_requisitions.txt");
            list.set(selectedRow, new PurchaseRequisition(
                    prId, 
                    itemId, 
                    itemName, 
                    quantity, 
                    requiredDate, 
                    supplierID, 
                    salesmanagerID
                )
            );
            FileHandler.smPRsaveEditDeleteToFile(list, "purchase_requisitions.txt");

            loadRequisitionDataToTable();

            JOptionPane.showMessageDialog(this, "Requisition updated successfully.");
            
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
        }
    }//GEN-LAST:event_JBtnEditActionPerformed

    private void JBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnDeleteActionPerformed
        int selectedRow = JTablePurchaseRequisition.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this requisition?",
            "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                ArrayList<PurchaseRequisition> list = FileHandler.loadPRFile("purchase_requisitions.txt");
                list.remove(selectedRow);
                FileHandler.smPRsaveEditDeleteToFile(list,"purchase_requisitions.txt");

                loadRequisitionDataToTable();

                JOptionPane.showMessageDialog(this, "Requisition deleted.");
            
            } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_JBtnDeleteActionPerformed

    private void JTextRequiredByMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTextRequiredByMouseClicked
        JTextRequiredBy.setText("");
    }//GEN-LAST:event_JTextRequiredByMouseClicked
    
    private void loadRequisitionDataToTable() {
        DefaultTableModel model = (DefaultTableModel) JTablePurchaseRequisition.getModel();
        model.setRowCount(0);

        ArrayList<PurchaseRequisition> list = FileHandler.loadPRFile("purchase_requisitions.txt");
        for (PurchaseRequisition pr : list) {
            model.addRow(new Object[]{
                pr.getPrId(),
                pr.getItemId(),
                pr.getQuantity(),
                pr.getRequireDate()
            });
        }
    }
    
    private boolean validateRequisitionInputs(String prId, String itemID, String itemName, String quantityStr, String requiredBy, String supplierID, String salesID) {
        if (itemID.isEmpty() || itemName.isEmpty() || quantityStr.isEmpty() || requiredBy.isEmpty() || prId.isEmpty() || supplierID.isEmpty() || salesID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        try {
            int quantity = Integer.parseInt(quantityStr);
            if (quantity < 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be a non-negative number.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity must be a valid number.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtnAdd;
    private javax.swing.JButton JBtnBack;
    private javax.swing.JButton JBtnClear;
    private javax.swing.JButton JBtnDelete;
    private javax.swing.JButton JBtnEdit;
    private javax.swing.JLabel JLabelItemID;
    private javax.swing.JLabel JLabelItemName;
    private javax.swing.JLabel JLabelPurchaseRequisition;
    private javax.swing.JLabel JLabelQuantity;
    private javax.swing.JLabel JLabelRequiredBy;
    private javax.swing.JLabel JLabelRequisitionID;
    private javax.swing.JLabel JLabelSalesManagerID;
    private javax.swing.JLabel JLabelSupplierID;
    private javax.swing.JTable JTablePurchaseRequisition;
    private javax.swing.JTextField JTextItemID;
    private javax.swing.JTextField JTextItemName;
    private javax.swing.JTextField JTextQuantity;
    private javax.swing.JTextField JTextRequiredBy;
    private javax.swing.JTextField JTextRequisitionID;
    private javax.swing.JTextField JTextSalesManagerID;
    private javax.swing.JTextField JTextSupplierID;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
